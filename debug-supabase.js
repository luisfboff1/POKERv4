/**
 * üîç SCRIPT DE DIAGN√ìSTICO COMPLETO - SUPABASE
 * 
 * Cole este script no Console F12 do navegador
 * Ele vai testar:
 * 1. Conex√£o com Supabase
 * 2. Exist√™ncia das tabelas
 * 3. Usu√°rios dispon√≠veis
 * 4. Teste de login com credenciais
 */

async function diagnosticoCompleto() {
  console.clear();
  console.log('üîç INICIANDO DIAGN√ìSTICO COMPLETO...\n');

  // ========================================
  // 1. VERIFICAR VARI√ÅVEIS DE AMBIENTE
  // ========================================
  console.log('üìã 1. VERIFICANDO VARI√ÅVEIS DE AMBIENTE');
  console.log('‚îÄ'.repeat(50));
  
  const supabaseUrl = 'https://jhodhxvvhohygijqcxbo.supabase.co';
  const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impob2RoeHZ2aG9oeWdpanFjeGJvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA4OTg3ODUsImV4cCI6MjA3NjQ3NDc4NX0.XPzqxEm6rYFe6ctVbYs7AkJoI-cTjEu8pJjBftCkQGg';

  console.log('‚úÖ Supabase URL:', supabaseUrl);
  console.log('‚úÖ Anon Key:', supabaseAnonKey.substring(0, 20) + '...');
  console.log('');

  // ========================================
  // 2. TESTAR CONEX√ÉO COM SUPABASE
  // ========================================
  console.log('üîå 2. TESTANDO CONEX√ÉO COM SUPABASE');
  console.log('‚îÄ'.repeat(50));

  try {
    const healthCheck = await fetch(`${supabaseUrl}/rest/v1/`, {
      headers: {
        'apikey': supabaseAnonKey,
        'Authorization': `Bearer ${supabaseAnonKey}`
      }
    });

    if (healthCheck.ok) {
      console.log('‚úÖ Conex√£o com Supabase: OK');
    } else {
      console.error('‚ùå Conex√£o com Supabase: FALHOU');
      console.error('Status:', healthCheck.status);
      return;
    }
  } catch (error) {
    console.error('‚ùå Erro ao conectar com Supabase:', error.message);
    return;
  }
  console.log('');

  // ========================================
  // 3. VERIFICAR TABELAS
  // ========================================
  console.log('üìä 3. VERIFICANDO TABELAS');
  console.log('‚îÄ'.repeat(50));

  const tables = ['tenants', 'users', 'players', 'sessions', 'user_invites', 'user_sessions'];
  
  for (const table of tables) {
    try {
      const response = await fetch(`${supabaseUrl}/rest/v1/${table}?limit=1`, {
        headers: {
          'apikey': supabaseAnonKey,
          'Authorization': `Bearer ${supabaseAnonKey}`
        }
      });

      if (response.ok) {
        console.log(`‚úÖ Tabela '${table}': EXISTE`);
      } else {
        console.log(`‚ùå Tabela '${table}': N√ÉO ENCONTRADA (Status: ${response.status})`);
      }
    } catch (error) {
      console.log(`‚ùå Tabela '${table}': ERRO - ${error.message}`);
    }
  }
  console.log('');

  // ========================================
  // 4. VERIFICAR TENANTS
  // ========================================
  console.log('üè¢ 4. VERIFICANDO TENANTS');
  console.log('‚îÄ'.repeat(50));

  try {
    const response = await fetch(`${supabaseUrl}/rest/v1/tenants?select=*`, {
      headers: {
        'apikey': supabaseAnonKey,
        'Authorization': `Bearer ${supabaseAnonKey}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const tenants = await response.json();
      console.log(`‚úÖ Total de tenants: ${tenants.length}`);
      tenants.forEach((tenant, index) => {
        console.log(`\n  ${index + 1}. ${tenant.name}`);
        console.log(`     ID: ${tenant.id}`);
        console.log(`     Status: ${tenant.status}`);
        console.log(`     Plan: ${tenant.plan}`);
      });
    } else {
      console.log('‚ùå Erro ao buscar tenants:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Erro:', error.message);
  }
  console.log('');

  // ========================================
  // 5. VERIFICAR USU√ÅRIOS
  // ========================================
  console.log('üë• 5. VERIFICANDO USU√ÅRIOS');
  console.log('‚îÄ'.repeat(50));

  try {
    const response = await fetch(`${supabaseUrl}/rest/v1/users?select=id,name,email,role,is_active,tenant_id`, {
      headers: {
        'apikey': supabaseAnonKey,
        'Authorization': `Bearer ${supabaseAnonKey}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const users = await response.json();
      console.log(`‚úÖ Total de usu√°rios: ${users.length}`);
      
      if (users.length === 0) {
        console.log('‚ö†Ô∏è  NENHUM USU√ÅRIO ENCONTRADO NO BANCO!');
        console.log('   Voc√™ precisa criar usu√°rios primeiro.');
      } else {
        users.forEach((user, index) => {
          console.log(`\n  ${index + 1}. ${user.name}`);
          console.log(`     Email: ${user.email}`);
          console.log(`     Role: ${user.role}`);
          console.log(`     Ativo: ${user.is_active ? '‚úÖ' : '‚ùå'}`);
          console.log(`     Tenant ID: ${user.tenant_id}`);
        });
      }
    } else {
      console.log('‚ùå Erro ao buscar usu√°rios:', response.status);
      const errorText = await response.text();
      console.log('Detalhes:', errorText);
    }
  } catch (error) {
    console.log('‚ùå Erro:', error.message);
  }
  console.log('');

  // ========================================
  // 6. TESTAR LOGIN VIA API
  // ========================================
  console.log('üîê 6. TESTANDO API DE LOGIN');
  console.log('‚îÄ'.repeat(50));
  console.log('Para testar login, execute:');
  console.log('  testarLogin("seu_email@example.com", "sua_senha")');
  console.log('');

  // ========================================
  // RESUMO
  // ========================================
  console.log('‚ïê'.repeat(50));
  console.log('üìù DIAGN√ìSTICO CONCLU√çDO!');
  console.log('‚ïê'.repeat(50));
}

async function testarLogin(email, password) {
  console.log('\nüîê TESTANDO LOGIN...');
  console.log('‚îÄ'.repeat(50));
  console.log('Email:', email);
  console.log('Password:', '***' + password.slice(-2));
  console.log('');

  try {
    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, password })
    });

    const data = await response.json();

    console.log('Status:', response.status);
    console.log('Response:', data);

    if (response.ok) {
      console.log('\n‚úÖ LOGIN SUCESSO!');
      console.log('Token:', data.data.token.substring(0, 30) + '...');
      console.log('User:', data.data.user);
    } else {
      console.log('\n‚ùå LOGIN FALHOU!');
      console.log('Erro:', data.error);
      
      if (response.status === 401) {
        console.log('\nüí° POSS√çVEIS CAUSAS:');
        console.log('   1. Email n√£o existe no banco');
        console.log('   2. Senha incorreta');
        console.log('   3. Usu√°rio inativo (is_active = false)');
        console.log('   4. Tenant inativo (status != "active")');
      }
    }
  } catch (error) {
    console.error('‚ùå Erro na requisi√ß√£o:', error);
  }
}

async function criarUsuarioTeste() {
  console.log('\nüë§ CRIANDO USU√ÅRIO DE TESTE...');
  console.log('‚îÄ'.repeat(50));
  
  console.log('‚ö†Ô∏è  Esta fun√ß√£o precisa ser implementada no backend.');
  console.log('Sugest√£o: Crie um endpoint /api/auth/setup-test-user');
  console.log('');
  console.log('Por enquanto, voc√™ pode criar um usu√°rio direto no Supabase:');
  console.log('');
  console.log('1. Acesse: https://app.supabase.com/project/jhodhxvvhohygijqcxbo/editor');
  console.log('2. Crie um tenant na tabela "tenants" se n√£o existir');
  console.log('3. Crie um usu√°rio na tabela "users" com:');
  console.log('   - email: "admin@test.com"');
  console.log('   - password_hash: (use bcrypt para gerar o hash)');
  console.log('   - role: "admin"');
  console.log('   - is_active: true');
  console.log('   - tenant_id: (ID do tenant criado)');
}

// Expor fun√ß√µes globalmente
window.diagnosticoCompleto = diagnosticoCompleto;
window.testarLogin = testarLogin;
window.criarUsuarioTeste = criarUsuarioTeste;

// Executar automaticamente
diagnosticoCompleto();

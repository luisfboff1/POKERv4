// ==============================================
// COLE ESTE C√ìDIGO NO CONSOLE F12 (DevTools)
// ==============================================

console.log("üî• DIAGN√ìSTICO COMPLETO - PROBLEMA DO RANKING");
console.log("üìã Este script vai testar tudo e mostrar por que o ranking n√£o atualiza");

// Fun√ß√£o para fazer requisi√ß√µes com debug detalhado
async function testAPI(endpoint, method = 'GET', data = null) {
    console.log(`\nüöÄ TESTANDO: ${method} /${endpoint}`);
    
    try {
        const options = {
            method: method,
            headers: { 'Content-Type': 'application/json' }
        };
        
        const token = localStorage.getItem('token') || localStorage.getItem('authToken');
        if (token) {
            options.headers['Authorization'] = `Bearer ${token}`;
            console.log("üîë Token encontrado:", token.substring(0, 20) + "...");
        } else {
            console.log("‚ö†Ô∏è  Nenhum token encontrado!");
        }
        
        if (data && method !== 'GET') {
            options.body = JSON.stringify(data);
        }
        
        const API_BASE = window.location.origin + '/api';
        const response = await fetch(`${API_BASE}/${endpoint}`, options);
        
        console.log(`ÔøΩ Status: ${response.status} ${response.statusText}`);
        
        const result = await response.json();
        console.log("üìä Resposta:", result);
        
        return { status: response.status, data: result, ok: response.ok };
    } catch (error) {
        console.error(`‚ùå ERRO em /${endpoint}:`, error);
        return { error: error.message };
    }
}

// DIAGN√ìSTICO COMPLETO
async function diagnosticoCompleto() {
    console.log("\nüéØ INICIANDO DIAGN√ìSTICO FOCADO NO PROBLEMA DO RANKING");
    
    // 1. Login
    console.log("=" .repeat(50));
    console.log("1Ô∏è‚É£ FAZENDO LOGIN");
    const login = await testAPI('auth.php', 'POST', {
        action: 'login',
        email: 'luisfboff@hotmail.com',
        password: 'password'
    });
    
    if (login.ok && login.data?.token) {
        localStorage.setItem('token', login.data.token);
        console.log("‚úÖ Login OK - Token salvo");
    } else {
        console.log("‚ùå Falha no login!", login);
        return;
    }
    
    // 2. Testar Players API
    console.log("=" .repeat(50));
    console.log("2Ô∏è‚É£ TESTANDO API DE PLAYERS");
    const players = await testAPI('players.php');
    console.log(`üìà Players encontrados: ${players.data?.length || 0}`);
    
    // 3. Testar Sessions API
    console.log("=" .repeat(50));
    console.log("3Ô∏è‚É£ TESTANDO API DE SESS√ïES");
    const sessions = await testAPI('session.php');
    console.log(`üìä Sess√µes encontradas: ${sessions.data?.length || 0}`);
    
    // 4. Debug do banco - Contadores
    console.log("=" .repeat(50));
    console.log("4Ô∏è‚É£ VERIFICANDO CONTADORES DO BANCO");
    const tables = await testAPI('debug.php?action=tables');
    
    // 5. Ver dados espec√≠ficos
    console.log("=" .repeat(50));
    console.log("5Ô∏è‚É£ DADOS ESPEC√çFICOS");
    await testAPI('debug.php?action=players');
    await testAPI('debug.php?action=sessions');
    
    // 6. Testar sincroniza√ß√£o
    console.log("=" .repeat(50));
    console.log("6Ô∏è‚É£ TESTANDO SINCRONIZA√á√ÉO");
    const sync = await testAPI('sync_players_stats.php', 'POST', { action: 'sync_all' });
    
    console.log("\nüèÅ DIAGN√ìSTICO CONCLU√çDO!");
    console.log("üìã PR√ìXIMO PASSO: Se houver dados nas tabelas mas o ranking n√£o aparece,");
    console.log("   use a sincroniza√ß√£o para recalcular as estat√≠sticas!");
}

// EXECUTAR DIAGN√ìSTICO AUTOMATICAMENTE
diagnosticoCompleto();

// FUN√á√ïES DE TESTE INDIVIDUAL
window.testLogin = () => testAPI('auth.php', 'POST', {
    action: 'login', email: 'luisfboff@hotmail.com', password: 'password'
});
window.testPlayers = () => testAPI('players.php');
window.testSessions = () => testAPI('session.php');
window.syncStats = () => testAPI('sync_players_stats.php', 'POST', { action: 'sync_all' });
window.resetStats = () => testAPI('sync_players_stats.php', 'POST', { action: 'reset_all' });
window.clearAuth = () => { localStorage.clear(); console.log("üßπ Auth limpo!"); };

console.log(`
ÔøΩ FUN√á√ïES DISPON√çVEIS NO CONSOLE:
‚Ä¢ testLogin() - Fazer login
‚Ä¢ testPlayers() - Listar players  
‚Ä¢ testSessions() - Listar sess√µes
‚Ä¢ syncStats() - Sincronizar estat√≠sticas ‚≠ê
‚Ä¢ resetStats() - Resetar e recalcular tudo ‚≠ê
‚Ä¢ clearAuth() - Limpar autentica√ß√£o
‚Ä¢ diagnosticoCompleto() - Executar tudo novamente

‚≠ê Use syncStats() se o ranking n√£o atualiza ap√≥s excluir sess√µes!
`);